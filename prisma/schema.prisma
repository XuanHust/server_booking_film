// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Status {
  DADAT
  DAXACNHAN
	DANGDITOUR
  HUYTOUR
  DAHOANTHANHTOUR
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  firstName   String?
  middleName  String?
  lastName    String?
  username    String    @unique(map: "User_username_key")
  email       String    @unique(map: "User_email_key")
  phoneNumber String?
  password    String
  role        UserRole  @default(USER)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  hashedRt    String?

  reviews  Reviews[]
  bookings Bookings[]
}

model Tours {
  id          Int      @id @default(autoincrement())
  code        String?
  cateId      Int
  tourName    String
  banner      String
  poster      String
  description String   @db.LongText
  startDate   String
  endDate     String
  price       Decimal
  capacity    Int
  rate  Float?
  listLocation  String?   @db.LongText
  transport   String?
  startLocation  String?
	listDate   String?   @db.LongText

  createdAt   DateTime  @default(now())

  categories Categories? @relation(fields: [cateId], references: [id], map: "CategoryId_key")

  reviews  Reviews[]
  bookings Bookings[]
}

model Categories {
  id          Int      @id @default(autoincrement())
  name        String
  description String   @db.LongText

  createdAt   DateTime  @default(now())

  tours  Tours[]
}

model Bookings {
  id          Int      @id @default(autoincrement())
  userId      Int
  tourId      Int
  bookingDate DateTime @default(now())
  status      Status   @default(DADAT)
  totalPrice  Decimal?

  createdAt   DateTime  @default(now())

  tours Tours? @relation(fields: [tourId], references: [id], map: "Bookings_tours_key")
  user  User?  @relation(fields: [userId], references: [id], map: "Bookings_user_key")
}

model Reviews {
  id      Int    @id @default(autoincrement())
  userId  Int
  tourId  Int
  rating  Int
  comment String

  createdAt   DateTime  @default(now())

  tours Tours? @relation(fields: [tourId], references: [id], map: "Reviews_tours_key")
  user  User?  @relation(fields: [userId], references: [id], map: "Reviews_user_key")
}

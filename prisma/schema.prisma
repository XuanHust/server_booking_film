// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum GenreType {
  ACTION
  EMOTIONAL
  ROMANTIC
  HUMOROUS
  HORRIFIED
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  firstName   String?
  middleName  String?
  lastName    String?
  username    String    @unique(map: "User_username_key")
  email       String    @unique(map: "User_email_key")
  phoneNumber String?
  password    String
  role        UserRole  @default(USER)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  hashedRt    String?
}

model Tours {
  id  Int @id @default(autoincrement())
	name String
  title  String
  genre GenreType
  director String
  price Decimal

  bookings Bookings[]
	reviews Reviews[]
}

model Customers {
  id  Int @id @default(autoincrement())
	username String
  email String
  password String
  name String
  address String
  city String

  reviews Reviews[]
	bookings Bookings[]
}

model Bookings {
  id  Int @id @default(autoincrement()) 
  tourId Int 
  customerId Int
  bookingDate DateTime

  tours Tours? @relation(fields: [tourId], references: [id], map: "Booking_tours_key")
  customers Customers? @relation(fields: [customerId], references: [id], map: "Bookings_customer_key")

}

model Reviews {
  id  Int @id @default(autoincrement()) 
  customerId Int
	tourId Int
  rating String
  comment String

  tours Tours? @relation(fields: [tourId], references: [id], map: "Reviews_customer_key")
	customers Customers? @relation(fields: [customerId], references: [id], map: "Reviews_tour_key")

}

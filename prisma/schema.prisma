// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// generator erd {
//   provider = "prisma-erd-generator"
// }

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  firstName   String?
  middleName  String?
  lastName    String?
  username    String    @unique(map: "User_username_key")
  email       String    @unique(map: "User_email_key")
  phoneNumber String?
  password    String
  role        UserRole  @default(USER)
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  hashedRt    String?

  bookings Bookings[]
  reviews  Reviews[]
}

model Bookings {
  id  Int @id @default(autoincrement())
  userId Int
  movieId Int
  createdAt   DateTime  @default(now())

  user User? @relation(fields: [userId], references: [id], map: "User_booking_key")
  movies Movies? @relation(fields: [movieId], references: [id], map: "Bookings_movies_key")
}

model Reviews {
  id  Int @id @default(autoincrement())
  star Int?
  message String?       @db.LongText
  userId Int
  moviesId Int

  movies Movies? @relation(fields: [moviesId], references: [id], map: "Movies_review_key")
  user User? @relation(fields: [userId], references: [id], map: "User_review_key")
}

model Movies {
  id  Int @id @default(autoincrement())
  cinemaId Int
  title  String
  genre String
  banner String?
  poster String?
  director String
  duration Int
  trailer   String
  createdAt   DateTime  @default(now())

  cinemas Cinemas? @relation(fields: [cinemaId], references: [id], map: "cinema_key")

  screenings Screenings[]
  reviews Reviews[]
  bookings Bookings[]
}

model Cinemas {
  id  Int @id @default(autoincrement())
  name String
  address String
  city String
  createdAt   DateTime  @default(now())
  
  movies  Movies[]
  screenings Screenings[]
}

model Screenings {
  id  Int @id @default(autoincrement()) 
  movieId Int 
  cinemaId Int
  startTime DateTime
  createdAt   DateTime  @default(now())

  movies Movies? @relation(fields: [movieId], references: [id], map: "Screening_movies_key")
  cinemas Cinemas? @relation(fields: [cinemaId], references: [id], map: "Screening_cinemas_key")

  tickets Tickets[]
}

model Tickets {
  id  Int @id @default(autoincrement()) 
  screeningId Int
  seatNumber String
  price Decimal
  createdAt   DateTime  @default(now())

  screenings Screenings @relation(fields: [screeningId], references: [id], map: "Ticket_screening_key")
}
